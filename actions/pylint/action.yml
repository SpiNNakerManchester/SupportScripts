# Copyright (c) 2020 The University of Manchester
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

name: "Run Pylint"
description: |
  Runs pylint on a Python package. 
  Note that installing pylint in the environment before this action is up to the caller.
inputs:
  package:
    description: The name of the Python package (or packages) to analyse
    required: true
  disable:
    description: The messages/categories to disable
    required: false
    default: "R"
  jobs:
    description: The number of Python processes to use
    required: false
    default: "1"
  rcfile:
    description: The name of the pylint rc file
    required: false
    default: .pylintrc
  exitcheck:
    description: The combined results code to fail on
    required: false
    default: "39"
    # Pylint should leave with following status code:
    #  0 if everything went fine
    # 1 if a fatal message was issued
    # 2 if an error message was issued
    # 4 if a warning message was issued
    # 8 if a refactor message was issued
    # 16 if a convention message was issued
    # 32 on usage error
    # to die on fatal, error or usage the recommended way is
    # exit $(($? & 35))
  language:
    description: The (human) language to use for spell checking
    required: false
    default: ""
  dictionary:
    description: The custom dictionary to use for spell checking
    required: false
    default: .pylint_dict.txt
runs:
  using: composite
  steps:
    - name: Build composite dictionary
      run: |
        cat ${{ github.action_path }}/default_dict.txt >/tmp/dict.txt
        if test -r $DICTIONARY; then
          cat "$DICTIONARY" >>/tmp/dict.txt
        fi
      shell: bash
      env:
        DICTIONARY: ${{ inputs.dictionary }}
    - name: Run pylint
      run: |
        if test -n $SPELL_LANG; then
          pylint --output-format=colorized "--disable=$DISABLE_CATS" \
            --persistent=no "--jobs=$JOBS" --rcfile=$RC \
            "--spelling-dict=$SPELL_LANG" --spelling-private-dict-file=/tmp/dict.txt \
            $PACKAGES || exit $(($? & $FAIL_CODE))
        else
          pylint --output-format=colorized "--disable=$DISABLE_CATS" \
            --persistent=no "--jobs=$JOBS" "--rcfile=$RC" \
            $PACKAGES || exit $(($? & $FAIL_CODE))
        fi
      # Note that there's special conditioning of the return code of pylint
      shell: bash
      env:
        PACKAGES: ${{ inputs.package }}
        DISABLE_CATS: ${{ inputs.disable }}
        RC: ${{ inputs.rcfile }}
        JOBS: ${{ inputs.jobs }}
        SPELL_LANG: ${{ inputs.language }}
        FAIL_CODE: ${{ inputs.exitcheck }}
